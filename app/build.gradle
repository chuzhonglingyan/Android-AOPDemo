apply plugin: 'com.android.application'
apply plugin: 'yuntian-plugin'
apply plugin: 'hello-plugin'

def getDate() {
    def date = new Date()
    def formattedDate = date.format('yyyyMMddHHmm')
    return formattedDate
}


customPlugin{
    name = "yuntian"
    age = "25"
    address = "武汉"
}

android {
    compileSdkVersion 28
    defaultConfig {
        applicationId "com.yuntian.myapplication"
        minSdkVersion 15
        targetSdkVersion 28
        versionCode 1
        versionName "1.0"
        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
    }


    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    signingConfigs {


        //加载签名文件
        File propFile = file('sign.properties');
        if (propFile.exists()) {
            Properties props = new Properties()
            props.load(new FileInputStream(propFile))
            release {
                v1SigningEnabled true
                v2SigningEnabled true
                storeFile = file(props['STORE_FILE'])
                storePassword = props['STORE_PASSWORD']
                keyAlias = props['KEY_ALIAS']
                keyPassword = props['KEY_PASSWORD']
            }

            debug {
                v1SigningEnabled true
                v2SigningEnabled true
                storeFile = file(props['STORE_FILE'])
                storePassword = props['STORE_PASSWORD']
                keyAlias = props['KEY_ALIAS']
                keyPassword = props['KEY_PASSWORD']
            }
        } else {
            println 'signingConfigs:默认使用android.debug签名，可以在sign.properties自定义签名'
        }

    }

    buildTypes {

        release {
            signingConfig signingConfigs.release
            // 混淆
            minifyEnabled true
            // Zipalign优化
            zipAlignEnabled true
            // 移除无用的resource文件
            shrinkResources true
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'


        }

        debug {
            signingConfig signingConfigs.debug
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }

//    flavorDimensions "default" flavorDimensions "api", "mode"

    flavorDimensions("money", "channel")

    // 如果嫌上面写法麻烦,也可以这样简写,加上一个批量处理即可.
    productFlavors {

        vip {
            dimension "money"
        }

        free{
            dimension "money"
        }

        commonsoon{  dimension "channel"}
        zhushou91{  dimension "channel"}
//        market360{ dimension "channel"}
//        xiaomi{  dimension "channel"}
//        wandoujia{ dimension "channel"}
//        yingyonghui{ dimension "channel"}
//        jifengmarket{ dimension "channel"}
//        mumayi{ dimension "channel"}
//        yingyongbao{ dimension "channel"}
//        huaweimrket{ dimension "channel"}
//        anzhimarket{ dimension "channel"}
    }
    //批量处理
    productFlavors.all {
        flavor ->
            if(flavor.getDimension().startsWith("channel")){
                def channel = name.startsWith("_") ? name.substring(1) : name
                flavor.manifestPlaceholders = [MTA_CHANNEL_VALUE: channel]
            }
    }

    applicationVariants.all { variant ->    //批量修改Apk名字
        variant.outputs.all { output ->
           println  variant.applicationId
           def filePath= output.outputFile.parent
           if(filePath.split("${variant.flavorName}")!=null){
               filePath=filePath.split("${variant.flavorName}")[0]+"${variant.buildType.name}"
               println    filePath
           }

           def orgName= output.outputFile.name
           def appName=orgName.substring(0,orgName.indexOf('-'))
           println  appName
          //替换的字符串
           def fileName = "${appName}_V${variant.versionName}_${variant.flavorName}_${variant.buildType.name}_${getDate()}.apk"

           variant.getPackageApplication().outputDirectory = new File(filePath)
           outputFileName = fileName
        }
    }
}

dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])
    implementation 'com.android.support:appcompat-v7:28.0.0'
    implementation 'com.android.support.constraint:constraint-layout:1.1.3'
    testImplementation 'junit:junit:4.12'
    androidTestImplementation 'com.android.support.test:runner:1.0.2'
    androidTestImplementation 'com.android.support.test.espresso:espresso-core:3.0.2'

}



//执行一个task  脚本命令：gradle hello
//会在task本身被执行doFirst/doLast 才会被执行
//一个Task就是一个标准的Groovy函数调用
//task hello{
//    doFirst{
//        println"任务执行之前"
//    }
//
//    doLast{
//        println"任务执行之后"
//    }
//}
